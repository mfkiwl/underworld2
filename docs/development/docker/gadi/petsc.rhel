#####################################################################
# Multi stage Dockerfile structure:
# 1. runtime 
# 2. build
# 3. final == runtime + min. build
#
# It begins with layers for runtime execution. 
# The runtime environment (packages, permissions, ENV vars.) 
# are consistent accross all layer of this Dockerfile. 
# The build layer takes the runtime layer and builds the software
# stack in /usr/local.
# The final image is a composite of the runtime layer and 
# minimal sections of the build layer.
#####################################################################

ARG PYTHON_VERSION="3.11"
ARG BASE_IMAGE="rockylinux:8.9"
ARG PETSC_VERSION="3.22.4"

FROM ${BASE_IMAGE} as runtime
LABEL maintainer="https://github.com/underworldcode/"
# need to repeat ARGS after every FROM 
ARG PYTHON_VERSION
#### Dockerfile ENV vars - for all image stages
ENV LANG=C.UTF-8
# mpi lib will be install at /usr/local/lib
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# python env vars. 
# prepappending on PATH means all pip install will goto the PYOPT
ENV PYVER=${PYTHON_VERSION}
ENV PYOPT=/opt/venv
ENV PATH=$PYOPT/bin:$PATH
ENV PYTHONPATH=$PYTHONPATH:$PYOPT/lib/python${PYVER}/site-packages
ENV PETSC_DIR=/usr/local
ENV PYTHONPATH=$PYTHONPATH:$PETSC_DIR/lib

# add user jovyan
ENV NB_USER jovyan
ENV NB_HOME /home/$NB_USER
RUN useradd -m -s /bin/bash -N $NB_USER

RUN yum update -y \
&&  yum install -y \
        bash-completion \
        openssh \
        openblas \
        python${PYVER}-pip \
        python${PYVER}-devel \
        openmpi \
        findutils \
&& yum clean all \
&& rm -rf /var/cache/yum

# build and open virtual environment
RUN python3 -m venv $PYOPT \
&&  chmod ugo+rwx $PYOPT \
&&  pip3 install -U setuptools \
                    wheel \
                    pip

FROM runtime as build

ARG PETSC_VERSION
ARG PYTHON_VERSION

RUN yum update -yq \
&&  yum install -y \
        ca-certificates \
        wget \
        make \
        gcc-gfortran \
        gcc-c++ \
        cmake \
        openblas \
        zlib-devel \
        openmpi-devel \
        findutils \
        git \
&&  yum clean all \
&&  rm -rf /var/cache/yum

# add system openmpi to $PATH - why RedHat
ENV PATH=/usr/lib64/openmpi/bin:$PATH

RUN pip3 install --no-cache-dir \
      "cython==3.0.10" \
      "numpy<2" \
      mpi4py

# get petsc
RUN mkdir -p /tmp/src
WORKDIR /tmp/src
RUN wget https://web.cels.anl.gov/projects/petsc/download/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz --no-check-certificate \
&& tar -zxf petsc-lite-${PETSC_VERSION}.tar.gz 
WORKDIR /tmp/src/petsc-${PETSC_VERSION}              

# install petsc as root
RUN PETSC_DIR=`pwd` ./configure --with-debugging=0 --prefix=/usr/local \
                --COPTFLAGS="-g -O3" --CXXOPTFLAGS="-g -O3" --FOPTFLAGS="-g -O3" \
                --with-petsc4py=1               \
                --with-zlib=1                   \
                --with-shared-libraries=1       \
                --with-cxx-dialect=C++11        \
                --with-make-np=4                \
                --download-hdf5=https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-1_10_8.tar.gz \
                --download-mumps                \
                --download-parmetis             \
                --download-metis                \
                --download-superlu              \
                --download-hypre                \
                --download-scalapack            \
                --download-fblaslapack          \
                --download-superlu_dist         \
                --download-pragmatic            \
                --download-ctetgen              \
                --download-eigen                \
                --download-superlu              \
                --download-triangle             \
                --useThreads=0                  \
&&  make PETSC_DIR=`pwd` PETSC_ARCH=arch-linux-c-opt all \
&&  make PETSC_DIR=`pwd` PETSC_ARCH=arch-linux-c-opt install \
&&  rm -rf /usr/local/share/petsc

# record builder stage packages used
RUN pip3 freeze > /opt/requirements.txt \
&&  dnf history userinstalled > /opt/packages.txt

FROM runtime as minimal

COPY --from=build /opt /opt
COPY --from=build /usr/local /usr/local

# add system openmpi to $PATH - why RedHat
ENV PATH=/usr/lib64/openmpi/bin:$PATH

# switch to not-root user and workspace
USER $NB_USER
WORKDIR $NB_HOME

# default command is to run jupyter lab
CMD ["jupyter-lab", "--no-browser", "--ip='0.0.0.0'"]
